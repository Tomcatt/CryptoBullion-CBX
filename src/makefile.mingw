# Copyright (c) 2009-2010 Satoshi Nakamoto
# Distributed under the MIT/X11 software license, see the accompanying
# file COPYING or http://www.opensource.org/licenses/mit-license.php.

USE_UPNP:=0
USE_IPV6:=1
USE_LEVELDB:=1

DEPSPATH=C:/deps

INCLUDEPATHS= \
 -I"$(DEPSPATH)/boost_1_57_0" \
 -I"$(DEPSPATH)/db-4.8.30.NC/build_unix" \
 -I"$(DEPSPATH)/openssl-1.0.1l/include"

LIBPATHS= \
 -L"$(DEPSPATH)/boost_1_57_0/stage/lib" \
 -L"$(DEPSPATH)/db-4.8.30.NC/build_unix" \
 -L"$(DEPSPATH)/openssl-1.0.1l"

LIBS= \
 -lboost_system-mgw48-mt-s-1_57 \
 -lboost_filesystem-mgw48-mt-s-1_57 \
 -lboost_program_options-mgw48-mt-s-1_57 \
 -lboost_thread-mgw48-mt-s-1_57 \
 -lboost_chrono-mgw48-mt-s-1_57 \
 -ldb_cxx \
 -lssl \
 -lcrypto

DEFS=-DWIN32 -D_WINDOWS -DBOOST_THREAD_USE_LIB -DBOOST_SPIRIT_THREADSAFE
DEBUGFLAGS=-g
CFLAGS=-mthreads -O2 -msse2 -w -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter $(DEBUGFLAGS) $(DEFS) $(INCLUDEPATHS)
#LDFLAGS=-Wl,--dynamicbase -Wl,--nxcompat
LDFLAGS=-Wl,--dynamicbase -Wl,--nxcompat -Wl,--large-address-aware -static

TESTDEFS = -DTEST_DATA_DIR=$(abspath test/data)

ifndef USE_UPNP
	override USE_UPNP = 0
endif
ifneq (${USE_UPNP}, 0)
 INCLUDEPATHS += -I"$(CURDIR)/minupnpc/"
 LIBPATHS += -L"$(CURDIR)/minupnpc/"
 LIBS += -l miniupnpc -l iphlpapi
 DEFS += -DSTATICLIB -DUSE_UPNP=$(USE_UPNP)
endif

ifneq (${USE_IPV6}, -)
	DEFS += -DUSE_IPV6=$(USE_IPV6)
endif


# TODO: make the mingw builds smarter about dependencies, like the linux/osx builds are
HEADERS = $(wildcard *.h)

OBJS= \
    obj/alert.o \
    obj/version.o \
    obj/checkpoints.o \
    obj/netbase.o \
    obj/addrman.o \
    obj/crypter.o \
    obj/key.o \
    obj/db.o \
    obj/init.o \
    obj/irc.o \
    obj/keystore.o \
    obj/main.o \
    obj/net.o \
    obj/protocol.o \
    obj/cryptobullionrpc.o \
    obj/rpcdump.o \
    obj/rpcnet.o \
    obj/rpcwallet.o \
    obj/rpcblockchain.o \
    obj/rpcrawtransaction.o \
    obj/script.o \
    obj/sync.o \
    obj/util.o \
    obj/wallet.o \
    obj/walletdb.o \
    obj/noui.o \
    obj/kernel.o \
    obj/pbkdf2.o \
    obj/scrypt_mine.o \
    obj/scrypt-x86.o \
    obj/scrypt-x86_64.o

all: cryptobulliond.exe

#
# LevelDB support
#
ifdef USE_LEVELDB

    leveldb/libleveldb.a:
	cd leveldb; TARGET_OS=OS_WINDOWS_CROSSCOMPILE make libleveldb.a libmemenv.a; cd ..

    LIBS += $(CURDIR)/leveldb/libleveldb.a $(CURDIR)/leveldb/libmemenv.a
    DEFS += $(addprefix -I,$(CURDIR)/leveldb/include) -DUSE_LEVELDB
    DEFS += $(addprefix -I,$(CURDIR)/leveldb/helpers)
    OBJS += obj/txdb-leveldb.o
    obj/txdb-leveldb.o: leveldb/libleveldb.a
else
    OBJS += obj/txdb-bdb.o
endif

LIBS += -l kernel32 -l user32 -l gdi32 -l comdlg32 -l winspool -l winmm -l shell32 -l comctl32 -l ole32 -l oleaut32 -l uuid -l rpcrt4 -l advapi32 -l ws2_32 -l mswsock -l shlwapi -l ssp

test check: test_CryptoBullion.exe FORCE
	test_CryptoBullion.exe

obj/%.o: %.cpp $(HEADERS)
	g++ -c $(CFLAGS) -o $@ $<

obj/scrypt-x86.o: scrypt-x86.S
	$(CXX) -c $(xCXXFLAGS) -MMD -o $@ $<

obj/scrypt-x86_64.o: scrypt-x86_64.S
	$(CXX) -c $(xCXXFLAGS) -MMD -o $@ $<

cryptobulliond.exe: $(OBJS:obj/%=obj/%)
	g++ $(CFLAGS) $(LDFLAGS) -o $@ $(LIBPATHS) $^ $(LIBS)

TESTOBJS := $(patsubst test/%.cpp,obj-test/%.o,$(wildcard test/*.cpp))

obj-test/%.o: test/%.cpp $(HEADERS)
	g++ -c $(TESTDEFS) $(CFLAGS) -o $@ $<

test_cryptobullion.exe: $(TESTOBJS) $(filter-out obj/init.o,$(OBJS:obj/%=obj/%))
	g++ $(CFLAGS) $(LDFLAGS) -o $@ $(LIBPATHS) $^ -lboost_unit_test_framework $(LIBS)

clean:
	-del /Q cryptobulliond test_CryptoBullion
	-del /Q obj\*
	-del /Q obj-test\*

FORCE:
